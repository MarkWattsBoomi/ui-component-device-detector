!function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=2)}([function(t,e){t.exports=React},function(t,e,o){"use strict";var n,r=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var i=o(0),a=function(t){function e(e){var o=t.call(this,e)||this;return o.googleMapsURL="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZ2cbjJkFl5qygZYcKrcZVTzfX70G_-nY",o.onScriptLoaded=o.onScriptLoaded.bind(o),o}return r(e,t),e.prototype.componentDidMount=function(){this.addMapsScript()},e.prototype.addMapsScript=function(){var t=this;document.querySelectorAll('[src="'+this.googleMapsURL+'"]').length?this.onScriptLoaded():document.body.appendChild(Object.assign(document.createElement("script"),{type:"text/javascript",src:this.googleMapsURL,onload:function(){return t.onScriptLoaded()}}))},e.prototype.onScriptLoaded=function(){var t={center:{lng:parseFloat(this.props.centre.lng),lat:parseFloat(this.props.centre.lat)},zoom:parseInt(this.props.zoom)},e=new google.maps.Map(document.getElementById("map"),t);if(this.props.children)switch(Object.prototype.toString.call(this.props.children)){case"[object Array]":for(var o=this.props.children,n=0;n<o.length;n++){var r={position:{lng:parseFloat(o[n].props.center.lng),lat:parseFloat(o[n].props.center.lat)},map:e,title:o[n].props.title};new google.maps.Marker(r)}break;case"[object Object]":var i=this.props.children;r={position:{lng:parseFloat(i.props.center.lng),lat:parseFloat(i.props.center.lat)},map:e,title:i.props.title},new google.maps.Marker(r)}},e.prototype.render=function(){return i.createElement("div",{style:{width:"100%",height:"100%"},id:"map"})},e}(i.Component);e.default=a},function(t,e,o){"use strict";function n(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}Object.defineProperty(e,"__esModule",{value:!0}),n(o(3)),n(o(4)),n(o(1)),n(o(5))},function(t,e,o){"use strict";var n,r=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var i=o(0),a=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.text="",o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes[r]=n.attributes[r];return o}return r(e,t),e.prototype.componentDidMount=function(){this.detectDevice()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.render=function(){var t=manywho.model.getComponent(this.componentId,this.flowKey),e=manywho.state.getComponent(this.componentId,this.flowKey),o=(this.getAttribute("Title"),t.width+"px"),n=t.height+"px",r={};r.width=o,r.height=n;var a="OS:"+this.platform+" Browser:"+this.vendor+" - "+this.product+" Latitude:"+this.latitude+" Longitude:"+this.longitude;return e.contentValue=a,i.createElement("div",null,a)},e.prototype.imhere=function(t){this.latitude=t.coords.latitude,this.longitude=t.coords.longitude,this.forceUpdate()},e.prototype.detectDevice=function(){this.platform=navigator.platform,this.product=navigator.product,this.vendor=navigator.vendor,navigator.geolocation.getCurrentPosition(this.imhere.bind(this))},e}(i.Component);manywho.component.register("DeviceDetector",a),e.default=a},function(t,e,o){"use strict";var n,r=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var i=o(0),a=o(1),p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.text="here",e}return r(e,t),e.prototype.render=function(){var t={position:"absolute",width:40,height:40,left:-20,top:-20,border:"5px solid #f44336",borderRadius:40,backgroundColor:"white",textAlign:"center",color:"#3f51b5",fontSize:16,fontWeight:"bold",padding:4};return i.createElement("div",{style:t},this.text)},e}(i.Component),s=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.text="",o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes[r]=n.attributes[r];return o}return r(e,t),e.prototype.componentDidMount=function(){var t,e=manywho.model.getComponent(this.componentId,this.flowKey),o=manywho.state.getComponent(this.componentId,this.flowKey)||{};if(o.objectData[0]){var n=(t=o.objectData[0]).properties;this.longitude=manywho.utils.getObjectDataProperty(n,"Longitude").contentValue,this.latitude=manywho.utils.getObjectDataProperty(n,"Latitude").contentValue}else t=e.objectData[0];var r={objectData:[t=JSON.parse(JSON.stringify(t))]};manywho.state.setComponent(this.componentId,r,this.flowKey,!0),1==e.isEditable?this.detectLocation():this.forceUpdate()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.save=function(){manywho.state.getComponent(this.componentId,this.flowKey);var t=manywho.model.getComponent(this.componentId,this.flowKey).objectData[0];(t=JSON.parse(JSON.stringify(t))).isSelected=!0,manywho.utils.setObjectDataProperty(t.properties,"OperatingSystem",this.operatingSystem),manywho.utils.setObjectDataProperty(t.properties,"BrowserVendor",this.browserVendor),manywho.utils.setObjectDataProperty(t.properties,"BrowserName",this.browserName),manywho.utils.setObjectDataProperty(t.properties,"Longitude",this.longitude),manywho.utils.setObjectDataProperty(t.properties,"Latitude",this.latitude);var e={objectData:[t]};manywho.state.setComponent(this.componentId,e,this.flowKey,!0),this.forceUpdate()},e.prototype.render=function(){var t,e=manywho.model.getComponent(this.componentId,this.flowKey),o=(manywho.state.getComponent(this.componentId,this.flowKey),this.getAttribute("Title"),parseInt(this.getAttribute("Zoom")||18)),n=(this.getAttribute("ApiKey"),e.width,e.height+"px"),r={};if(r.width="100%",r.height=n,this.longitude&&this.latitude){var s={lat:this.latitude,lng:this.longitude};t=i.createElement(a.default,{centre:s,zoom:o},i.createElement(p,{center:s,title:"Here"}))}return i.createElement("div",{style:r},t)},e.prototype.handleApiLoaded=function(t,e){},e.prototype.imhere=function(t){this.latitude=t.coords.latitude,this.longitude=t.coords.longitude,this.operatingSystem=navigator.platform,this.browserName=navigator.product,this.browserVendor=navigator.vendor,this.save()},e.prototype.detectLocation=function(){navigator.geolocation.getCurrentPosition(this.imhere.bind(this)),this.operatingSystem=navigator.platform,this.browserName=navigator.product,this.browserVendor=navigator.vendor,this.save()},e}(i.Component);manywho.component.register("WhereAmI",s),e.default=s},function(t,e,o){"use strict";var n,r=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var i=o(0);!function(t){function e(e){var o=t.call(this,e)||this;return o.googleMapsURL="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZ2cbjJkFl5qygZYcKrcZVTzfX70G_-nY",o.onScriptLoaded=o.onScriptLoaded.bind(o),o}r(e,t),e.prototype.componentDidMount=function(){this.addMapsScript()},e.prototype.addMapsScript=function(){var t=this;document.querySelectorAll('[src="'+this.googleMapsURL+'"]').length?this.onScriptLoaded():document.body.appendChild(Object.assign(document.createElement("script"),{type:"text/javascript",src:this.googleMapsURL,onload:function(){return t.onScriptLoaded()}}))},e.prototype.onScriptLoaded=function(){var t={lng:parseInt(this.props.centre.lng),lat:parseInt(this.props.centre.lat)},e=this.props.title,o={position:t,map:this.props.map,title:e};new google.maps.Marker(o)},e.prototype.render=function(){return i.createElement("div",{style:{width:"100%",height:"100%"}})}}(i.Component);e.default=Map}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,