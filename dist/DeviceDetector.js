!function(t){function e(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var o={};e.m=t,e.c=o,e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=2)}([function(t,e){t.exports=React},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=o(0),i=function(t){function e(e){var o=t.call(this,e)||this;return o.googleMapsURL="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZ2cbjJkFl5qygZYcKrcZVTzfX70G_-nY",o.onScriptLoaded=o.onScriptLoaded.bind(o),o}return n(e,t),e.prototype.componentDidMount=function(){this.addMapsScript()},e.prototype.addMapsScript=function(){var t=this;document.querySelectorAll('[src="'+this.googleMapsURL+'"]').length?this.onScriptLoaded():document.body.appendChild(Object.assign(document.createElement("script"),{type:"text/javascript",src:this.googleMapsURL,onload:function(){return t.onScriptLoaded()}}))},e.prototype.onScriptLoaded=function(){var t={lng:parseFloat(this.props.centre.lng),lat:parseFloat(this.props.centre.lat)},e=parseInt(this.props.zoom),o={center:t,zoom:e},n=new google.maps.Map(document.getElementById("map"),o);if(this.props.children)switch(Object.prototype.toString.call(this.props.children)){case"[object Array]":for(var r=this.props.children,i=0;i<r.length;i++){var a={lng:parseFloat(r[i].props.center.lng),lat:parseFloat(r[i].props.center.lat)},s={position:a,map:n,title:r[i].props.title};new google.maps.Marker(s)}break;case"[object Object]":var p=this.props.children,a={lng:parseFloat(p.props.center.lng),lat:parseFloat(p.props.center.lat)},s={position:a,map:n,title:p.props.title};new google.maps.Marker(s)}},e.prototype.render=function(){return r.createElement("div",{style:{width:"100%",height:"100%"},id:"map"})},e}(r.Component);e.default=i},function(t,e,o){"use strict";function n(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}Object.defineProperty(e,"__esModule",{value:!0}),n(o(3)),n(o(4)),n(o(1)),n(o(5))},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=o(0),i=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.text="",o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes[r]=n.attributes[r];return o}return n(e,t),e.prototype.componentDidMount=function(){this.detectDevice()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.render=function(){var t=manywho.model.getComponent(this.componentId,this.flowKey),e=manywho.state.getComponent(this.componentId,this.flowKey),o=(this.getAttribute("Title"),t.width+"px"),n=t.height+"px",i={};i.width=o,i.height=n;var a="OS:"+this.platform+" Browser:"+this.vendor+" - "+this.product+" Latitude:"+this.latitude+" Longitude:"+this.longitude;return e.contentValue=a,r.createElement("div",null,a)},e.prototype.imhere=function(t){this.latitude=t.coords.latitude,this.longitude=t.coords.longitude,this.forceUpdate()},e.prototype.detectDevice=function(){this.platform=navigator.platform,this.product=navigator.product,this.vendor=navigator.vendor,navigator.geolocation.getCurrentPosition(this.imhere.bind(this))},e}(r.Component);manywho.component.register("DeviceDetector",i),e.default=i},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=o(0),i=o(1),a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.text="here",e}return n(e,t),e.prototype.render=function(){var t={position:"absolute",width:40,height:40,left:-20,top:-20,border:"5px solid #f44336",borderRadius:40,backgroundColor:"white",textAlign:"center",color:"#3f51b5",fontSize:16,fontWeight:"bold",padding:4};return r.createElement("div",{style:t},this.text)},e}(r.Component),s=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes={},o.text="",o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.props.id,o.props.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes[r]=n.attributes[r];return o}return n(e,t),e.prototype.componentDidMount=function(){var t,e=manywho.model.getComponent(this.componentId,this.flowKey),o=manywho.state.getComponent(this.componentId,this.flowKey)||{};if(o.objectData[0]){t=o.objectData[0];var n=t.properties;this.longitude=manywho.utils.getObjectDataProperty(n,"Longitude").contentValue,this.latitude=manywho.utils.getObjectDataProperty(n,"Latitude").contentValue}else t=e.objectData[0];t=JSON.parse(JSON.stringify(t));var r={objectData:[t]};manywho.state.setComponent(this.componentId,r,this.flowKey,!0),1==e.isEditable?this.detectLocation():this.forceUpdate()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.save=function(){var t=(manywho.state.getComponent(this.componentId,this.flowKey),manywho.model.getComponent(this.componentId,this.flowKey)),e=t.objectData[0];e=JSON.parse(JSON.stringify(e)),e.isSelected=!0,manywho.utils.setObjectDataProperty(e.properties,"OperatingSystem",this.operatingSystem),manywho.utils.setObjectDataProperty(e.properties,"BrowserVendor",this.browserVendor),manywho.utils.setObjectDataProperty(e.properties,"BrowserName",this.browserName),manywho.utils.setObjectDataProperty(e.properties,"Longitude",this.longitude),manywho.utils.setObjectDataProperty(e.properties,"Latitude",this.latitude);var o={objectData:[e]};manywho.state.setComponent(this.componentId,o,this.flowKey,!0),this.forceUpdate()},e.prototype.render=function(){var t=manywho.model.getComponent(this.componentId,this.flowKey),e=(manywho.state.getComponent(this.componentId,this.flowKey),this.getAttribute("Title"),parseInt(this.getAttribute("Zoom")||18)),o=(this.getAttribute("ApiKey"),t.width,t.height+"px"),n={};n.width="100%",n.height=o;var s;if(this.longitude&&this.latitude){var p={lat:this.latitude,lng:this.longitude};s=r.createElement(i.default,{centre:p,zoom:e},r.createElement(a,{center:p,title:"Here"}))}return r.createElement("div",{style:n},s)},e.prototype.handleApiLoaded=function(t,e){},e.prototype.imhere=function(t){this.latitude=t.coords.latitude,this.longitude=t.coords.longitude,this.operatingSystem=navigator.platform,this.browserName=navigator.product,this.browserVendor=navigator.vendor,this.save()},e.prototype.detectLocation=function(){navigator.geolocation.getCurrentPosition(this.imhere.bind(this)),this.operatingSystem=navigator.platform,this.browserName=navigator.product,this.browserVendor=navigator.vendor,this.save()},e}(r.Component);manywho.component.register("WhereAmI",s),e.default=s},function(t,e,o){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=o(0);!function(t){function e(e){var o=t.call(this,e)||this;return o.googleMapsURL="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZ2cbjJkFl5qygZYcKrcZVTzfX70G_-nY",o.onScriptLoaded=o.onScriptLoaded.bind(o),o}n(e,t),e.prototype.componentDidMount=function(){this.addMapsScript()},e.prototype.addMapsScript=function(){var t=this;document.querySelectorAll('[src="'+this.googleMapsURL+'"]').length?this.onScriptLoaded():document.body.appendChild(Object.assign(document.createElement("script"),{type:"text/javascript",src:this.googleMapsURL,onload:function(){return t.onScriptLoaded()}}))},e.prototype.onScriptLoaded=function(){var t={lng:parseInt(this.props.centre.lng),lat:parseInt(this.props.centre.lat)},e=this.props.title,o=this.props.map,n={position:t,map:o,title:e};new google.maps.Marker(n)},e.prototype.render=function(){return r.createElement("div",{style:{width:"100%",height:"100%"}})}}(r.Component);e.default=Map}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRGV2aWNlRGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDkzNmU0NTliMGZhYmJiNjJmOTUwIiwid2VicGFjazovLy9leHRlcm5hbCBcIlJlYWN0XCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL01hcC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvRGV2aWNlRGV0ZWN0b3IudHN4Iiwid2VicGFjazovLy8uL3NyYy9XaGVyZUFtSS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL01hcmtlci50c3giXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlJlYWN0IiwiX19leHRlbmRzIiwidGhpcyIsImV4dGVuZFN0YXRpY3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiYiIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJ2YWx1ZSIsIk1hcCIsIl9zdXBlciIsInByb3BzIiwiX3RoaXMiLCJnb29nbGVNYXBzVVJMIiwib25TY3JpcHRMb2FkZWQiLCJiaW5kIiwiY29tcG9uZW50RGlkTW91bnQiLCJhZGRNYXBzU2NyaXB0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiYm9keSIsImFwcGVuZENoaWxkIiwiYXNzaWduIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJzcmMiLCJvbmxvYWQiLCJjZW50cmUiLCJsbmciLCJwYXJzZUZsb2F0IiwibGF0Iiwiem9vbSIsInBhcnNlSW50Iiwib3B0aW9ucyIsImNlbnRlciIsIm1hcCIsImdvb2dsZSIsIm1hcHMiLCJnZXRFbGVtZW50QnlJZCIsImNoaWxkcmVuIiwidG9TdHJpbmciLCJhcnJheSIsIm1Qb3MiLCJwb3NpdGlvbiIsIm9wdHMiLCJ0aXRsZSIsIk1hcmtlciIsIm9iaiIsInJlbmRlciIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJpZCIsIkNvbXBvbmVudCIsImRlZmF1bHQiLCJfX2V4cG9ydCIsIkRldmljZURldGVjdG9yIiwiY29tcG9uZW50SWQiLCJmbG93S2V5IiwiYXR0cmlidXRlcyIsInRleHQiLCJmbG93TW9kZWwiLCJtYW55d2hvIiwibW9kZWwiLCJnZXRDb21wb25lbnQiLCJrZXkiLCJkZXRlY3REZXZpY2UiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnZXRBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwiZmxvd1N0YXRlIiwic3RhdGUiLCJsYWJlbCIsInBsYXRmb3JtIiwidmVuZG9yIiwicHJvZHVjdCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiY29udGVudFZhbHVlIiwiaW1oZXJlIiwicmVzdWx0IiwiY29vcmRzIiwiZm9yY2VVcGRhdGUiLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsImNvbXBvbmVudCIsInJlZ2lzdGVyIiwiTWFwXzEiLCJhcHBseSIsImFyZ3VtZW50cyIsIk1hcmtlclN0eWxlIiwibGVmdCIsInRvcCIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsImJhY2tncm91bmRDb2xvciIsInRleHRBbGlnbiIsImNvbG9yIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwicGFkZGluZyIsIldoZXJlQW1JIiwib2JqZWN0RGF0YSIsInByb3BlcnRpZXMiLCJ1dGlscyIsImdldE9iamVjdERhdGFQcm9wZXJ0eSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIm5ld1N0YXRlIiwic2V0Q29tcG9uZW50IiwiaXNFZGl0YWJsZSIsImRldGVjdExvY2F0aW9uIiwic2F2ZSIsImlzU2VsZWN0ZWQiLCJzZXRPYmplY3REYXRhUHJvcGVydHkiLCJvcGVyYXRpbmdTeXN0ZW0iLCJicm93c2VyVmVuZG9yIiwiYnJvd3Nlck5hbWUiLCJwb3MiLCJoYW5kbGVBcGlMb2FkZWQiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDSW5CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FJLEVBQUFKLEVBQ0FLLEdBQUEsRUFDQUgsV0FVQSxPQU5BSixHQUFBRSxHQUFBTSxLQUFBSCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSCxHQUdBSSxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBNEJBRixHQUFBUSxFQUFBVCxFQUdBQyxFQUFBUyxFQUFBUCxFQUdBRixFQUFBVSxFQUFBLFNBQUFQLEVBQUFRLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFWLEVBQUFRLElBQ0FHLE9BQUFDLGVBQUFaLEVBQUFRLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBZixHQUNBLEdBQUFRLEdBQUFSLEtBQUFnQixXQUNBLFdBQTJCLE1BQUFoQixHQUFBLFNBQzNCLFdBQWlDLE1BQUFBLEdBRWpDLE9BREFKLEdBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBUSxFQUFBQyxHQUFzRCxNQUFBUixRQUFBUyxVQUFBQyxlQUFBakIsS0FBQWMsRUFBQUMsSUFHdER0QixFQUFBeUIsRUFBQSxHQUdBekIsSUFBQTBCLEVBQUEsS0RNTSxTQUFVdEIsRUFBUUQsR0VuRXhCQyxFQUFBRCxRQUFBd0IsT0Z5RU0sU0FBVXZCLEVBQVFELEVBQVNILEdBRWpDLFlBRUEsSUFBSTRCLEdBQWFDLE1BQVFBLEtBQUtELFdBQWMsV0FDeEMs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WXRDLE9BQU91QyxPQUMvQkwsU0FBU00sY0FBYyxXQUNyQkMsS0FBTSxrQkFDTkMsSUFBSzNCLEtBQUtjLGNBQ1ZjLE9BQVEsV0FBTSxNQUFBZixHQUFLRSxzQkFRM0JpQyxFQUFBdEQsVUFBQXFCLGVBQUEsV0FHRSxHQUFJYyxJQUFVQyxJQUFLSSxTQUFTbEMsS0FBS1ksTUFBTWlCLE9BQU9DLEtBQU9FLElBQUtFLFNBQVNsQyxLQUFLWSxNQUFNaUIsT0FBT0csTUFDakZlLEVBQVEvQyxLQUFLWSxNQUFNbUMsTUFHbkJWLEVBQU1yQyxLQUFLWSxNQUFNeUIsSUFHakJTLEdBQVFELFNBQVVoQixFQUFRUSxJQUFNQSxFQUFLVSxNQUFRQSxFQUNwQyxJQUFJVCxRQUFPQyxLQUFLUyxPQUFPRixJQUl0Q0UsRUFBQXRELFVBQUF3RCxPQUFBLFdBRUUsTUFBT3BELEdBQUEyQixjQUFBLE9BQUswQixPQUFTQyxNQUFPLE9BQVFDLE9BQVEsWUFwRC9CdkQsRUFBTXlELFVBd0QzQmpGLEdBQUFrRixRQUFlOUMiLCJmaWxlIjoiRGV2aWNlRGV0ZWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgUmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG52YXIgTWFwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE1hcCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE1hcChwcm9wcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmdvb2dsZU1hcHNVUkwgPSBcImh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5RFoyY2JqSmtGbDVxeWdaWWNLcmNaVlR6Zlg3MEdfLW5ZXCI7XHJcbiAgICAgICAgX3RoaXMub25TY3JpcHRMb2FkZWQgPSBfdGhpcy5vblNjcmlwdExvYWRlZC5iaW5kKF90aGlzKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICAvL2ZpcmVzIHdoZW4gY29tcG9uZW50IGlzIG1vdW50ZWQgLyBjb21wbGV0ZVxyXG4gICAgTWFwLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL3JlcXVlc3QgdGhlIGdvb2dsZSBtYXBzIGFwaSBzY3JpcHQgdG8gYmUgYWRkZWRcclxuICAgICAgICB0aGlzLmFkZE1hcHNTY3JpcHQoKTtcclxuICAgIH07XHJcbiAgICAvL3RoaXMgZnVuY3Rpb24gYWRkcyB0aGUgZ29vZ2xlIG1hcHMgc2NyaXB0IHRvIHRoZSBwYWdlXHJcbiAgICAvL3RoZSB0aGlzLm9uU2NyaXB0TG9hZGVkIG1ldGhvZCB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIHNjcmlwdCBoYXMgY29tcGxldGVkIGxvYWRpbmdcclxuICAgIE1hcC5wcm90b3R5cGUuYWRkTWFwc1NjcmlwdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltzcmM9XFxcIlwiICsgdGhpcy5nb29nbGVNYXBzVVJMICsgXCJcXFwiXVwiKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyxcclxuICAgICAgICAgICAgICAgIHNyYzogdGhpcy5nb29nbGVNYXBzVVJMLFxyXG4gICAgICAgICAgICAgICAgb25sb2FkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5vblNjcmlwdExvYWRlZCgpOyB9XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub25TY3JpcHRMb2FkZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy90aGlzIGhhbmRsZXIgZmlyZXMgd2hlbiB0aGUgZ29vZ2xlIG1hcHMgc2NyaXB0IGhhcyBsb2FkZWRcclxuICAgIE1hcC5wcm90b3R5cGUub25TY3JpcHRMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9mb3JjZSBudW1iZXIgYXJncyBpbnRvIGZsb2F0cyAmIGludHNcclxuICAgICAgICB2YXIgY2VudHJlID0geyBsbmc6IHBhcnNlRmxvYXQodGhpcy5wcm9wcy5jZW50cmUubG5nKSwgbGF0OiBwYXJzZUZsb2F0KHRoaXMucHJvcHMuY2VudHJlLmxhdCkgfTtcclxuICAgICAgICB2YXIgem9vbSA9IHBhcnNlSW50KHRoaXMucHJvcHMuem9vbSk7XHJcbiAgICAgICAgLy9jcmVhdGUgYSBuZXcgb3B0aW9ucyBvYmplY3RcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHsgY2VudGVyOiBjZW50cmUsIHpvb206IHpvb20gfTtcclxuICAgICAgICAvL2NyZWF0ZSBhIG1hcFxyXG4gICAgICAgIHZhciBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwXCIpLCBvcHRpb25zKTtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzLnByb3BzLmNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIltvYmplY3QgQXJyYXldXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtUG9zID0gMDsgbVBvcyA8IGFycmF5Lmxlbmd0aDsgbVBvcysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHsgbG5nOiBwYXJzZUZsb2F0KGFycmF5W21Qb3NdLnByb3BzLmNlbnRlci5sbmcpLCBsYXQ6IHBhcnNlRmxvYXQoYXJyYXlbbVBvc10ucHJvcHMuY2VudGVyLmxhdCkgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdHMgPSB7IHBvc2l0aW9uOiBwb3NpdGlvbiwgbWFwOiBtYXAsIHRpdGxlOiBhcnJheVttUG9zXS5wcm9wcy50aXRsZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcihvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0geyBsbmc6IHBhcnNlRmxvYXQob2JqLnByb3BzLmNlbnRlci5sbmcpLCBsYXQ6IHBhcnNlRmxvYXQob2JqLnByb3BzLmNlbnRlci5sYXQpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdHMgPSB7IHBvc2l0aW9uOiBwb3NpdGlvbiwgbWFwOiBtYXAsIHRpdGxlOiBvYmoucHJvcHMudGl0bGUgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcihvcHRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNYXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiB7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJzEwMCUnIH0sIGlkOiBcIm1hcFwiIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNYXA7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IE1hcDtcclxuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKTtcclxuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg0KSk7XHJcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgUmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG52YXIgRGV2aWNlRGV0ZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRGV2aWNlRGV0ZWN0b3IsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEZXZpY2VEZXRlY3Rvcihwcm9wcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmNvbXBvbmVudElkID0gXCJcIjtcclxuICAgICAgICBfdGhpcy5mbG93S2V5ID0gXCJcIjtcclxuICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzID0ge307XHJcbiAgICAgICAgX3RoaXMudGV4dCA9IFwiXCI7XHJcbiAgICAgICAgX3RoaXMuY29tcG9uZW50SWQgPSBwcm9wcy5pZDtcclxuICAgICAgICBfdGhpcy5mbG93S2V5ID0gcHJvcHMuZmxvd0tleTtcclxuICAgICAgICAvL3B1c2ggYXR0cmlidXRlcyBpbnRvIGtleWVkIG1hcCBcclxuICAgICAgICB2YXIgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQoX3RoaXMucHJvcHMuaWQsIF90aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIGlmIChmbG93TW9kZWwuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZmxvd01vZGVsLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmF0dHJpYnV0ZXNba2V5XSA9IGZsb3dNb2RlbC5hdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgRGV2aWNlRGV0ZWN0b3IucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0RGV2aWNlKCk7XHJcbiAgICAgICAgLy90aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgRGV2aWNlRGV0ZWN0b3IucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIH07XHJcbiAgICBEZXZpY2VEZXRlY3Rvci5wcm90b3R5cGUuZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGV2aWNlRGV0ZWN0b3IucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICB2YXIgZmxvd1N0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICB2YXIgZmlsZVBpY2s7XHJcbiAgICAgICAgdmFyIGNhcHRpb24gPSB0aGlzLmdldEF0dHJpYnV0ZShcIlRpdGxlXCIpIHx8IFwiU2VsZWN0IEZpbGVcIjtcclxuICAgICAgICB2YXIgd2lkdGggPSBmbG93TW9kZWwud2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IGZsb3dNb2RlbC5oZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgdmFyIHN0eWxlID0ge307XHJcbiAgICAgICAgc3R5bGUud2lkdGggPSB3aWR0aDtcclxuICAgICAgICBzdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdmFyIGxhYmVsID0gXCJPUzpcIiArIHRoaXMucGxhdGZvcm0gKyBcIiBCcm93c2VyOlwiICsgdGhpcy52ZW5kb3IgKyBcIiAtIFwiICsgdGhpcy5wcm9kdWN0ICsgXCIgTGF0aXR1ZGU6XCIgKyB0aGlzLmxhdGl0dWRlICsgXCIgTG9uZ2l0dWRlOlwiICsgdGhpcy5sb25naXR1ZGU7XHJcbiAgICAgICAgZmxvd1N0YXRlLmNvbnRlbnRWYWx1ZSA9IGxhYmVsO1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIGxhYmVsKTtcclxuICAgIH07XHJcbiAgICBEZXZpY2VEZXRlY3Rvci5wcm90b3R5cGUuaW1oZXJlID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgIHRoaXMubGF0aXR1ZGUgPSByZXN1bHQuY29vcmRzLmxhdGl0dWRlO1xyXG4gICAgICAgIHRoaXMubG9uZ2l0dWRlID0gcmVzdWx0LmNvb3Jkcy5sb25naXR1ZGU7XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfTtcclxuICAgIERldmljZURldGVjdG9yLnByb3RvdHlwZS5kZXRlY3REZXZpY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5wbGF0Zm9ybSA9IG5hdmlnYXRvci5wbGF0Zm9ybTtcclxuICAgICAgICB0aGlzLnByb2R1Y3QgPSBuYXZpZ2F0b3IucHJvZHVjdDtcclxuICAgICAgICB0aGlzLnZlbmRvciA9IG5hdmlnYXRvci52ZW5kb3I7XHJcbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbih0aGlzLmltaGVyZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB2YXIgZGV2aWNlTmFtZTtcclxuICAgICAgICByZXR1cm4gZGV2aWNlTmFtZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGV2aWNlRGV0ZWN0b3I7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbm1hbnl3aG8uY29tcG9uZW50LnJlZ2lzdGVyKCdEZXZpY2VEZXRlY3RvcicsIERldmljZURldGVjdG9yKTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gRGV2aWNlRGV0ZWN0b3I7XHJcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFJlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxudmFyIE1hcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcclxudmFyIE1hcmtlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhNYXJrZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBNYXJrZXIoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMudGV4dCA9IFwiaGVyZVwiO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE1hcmtlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBLX1dJRFRIID0gNDA7XHJcbiAgICAgICAgdmFyIEtfSEVJR0hUID0gNDA7XHJcbiAgICAgICAgdmFyIE1hcmtlclN0eWxlID0ge1xyXG4gICAgICAgICAgICAvLyBpbml0aWFsbHkgYW55IG1hcCBvYmplY3QgaGFzIGxlZnQgdG9wIGNvcm5lciBhdCBsYXQgbG5nIGNvb3JkaW5hdGVzXHJcbiAgICAgICAgICAgIC8vIGl0J3Mgb24geW91IHRvIHNldCBvYmplY3Qgb3JpZ2luIHRvIDAsMCBjb29yZGluYXRlc1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICAgICAgd2lkdGg6IEtfV0lEVEgsXHJcbiAgICAgICAgICAgIGhlaWdodDogS19IRUlHSFQsXHJcbiAgICAgICAgICAgIGxlZnQ6IC1LX1dJRFRIIC8gMixcclxuICAgICAgICAgICAgdG9wOiAtS19IRUlHSFQgLyAyLFxyXG4gICAgICAgICAgICBib3JkZXI6ICc1cHggc29saWQgI2Y0NDMzNicsXHJcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogS19IRUlHSFQsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcclxuICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICAgICAgY29sb3I6ICcjM2Y1MWI1JyxcclxuICAgICAgICAgICAgZm9udFNpemU6IDE2LFxyXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDRcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IE1hcmtlclN0eWxlIH0sIHRoaXMudGV4dCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1hcmtlcjtcclxufShSZWFjdC5Db21wb25lbnQpKTtcclxudmFyIFdoZXJlQW1JID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFdoZXJlQW1JLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gV2hlcmVBbUkocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5jb21wb25lbnRJZCA9IFwiXCI7XHJcbiAgICAgICAgX3RoaXMuZmxvd0tleSA9IFwiXCI7XHJcbiAgICAgICAgX3RoaXMuYXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIF90aGlzLnRleHQgPSBcIlwiO1xyXG4gICAgICAgIF90aGlzLmNvbXBvbmVudElkID0gcHJvcHMuaWQ7XHJcbiAgICAgICAgX3RoaXMuZmxvd0tleSA9IHByb3BzLmZsb3dLZXk7XHJcbiAgICAgICAgLy9wdXNoIGF0dHJpYnV0ZXMgaW50byBrZXllZCBtYXAgXHJcbiAgICAgICAgdmFyIGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KF90aGlzLnByb3BzLmlkLCBfdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBpZiAoZmxvd01vZGVsLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGZsb3dNb2RlbC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hdHRyaWJ1dGVzW2tleV0gPSBmbG93TW9kZWwuYXR0cmlidXRlc1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIFdoZXJlQW1JLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICB2YXIgZmxvd1N0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KSB8fCB7fTtcclxuICAgICAgICB2YXIgb2JqZWN0RGF0YTtcclxuICAgICAgICBpZiAoZmxvd1N0YXRlLm9iamVjdERhdGFbMF0pIHtcclxuICAgICAgICAgICAgb2JqZWN0RGF0YSA9IGZsb3dTdGF0ZS5vYmplY3REYXRhWzBdO1xyXG4gICAgICAgICAgICB2YXIgcHJvcHMgPSBvYmplY3REYXRhLnByb3BlcnRpZXM7XHJcbiAgICAgICAgICAgIHRoaXMubG9uZ2l0dWRlID0gbWFueXdoby51dGlscy5nZXRPYmplY3REYXRhUHJvcGVydHkocHJvcHMsIFwiTG9uZ2l0dWRlXCIpLmNvbnRlbnRWYWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5sYXRpdHVkZSA9IG1hbnl3aG8udXRpbHMuZ2V0T2JqZWN0RGF0YVByb3BlcnR5KHByb3BzLCBcIkxhdGl0dWRlXCIpLmNvbnRlbnRWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9iamVjdERhdGEgPSBmbG93TW9kZWwub2JqZWN0RGF0YVswXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqZWN0RGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqZWN0RGF0YSkpO1xyXG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IHtcclxuICAgICAgICAgICAgb2JqZWN0RGF0YTogW29iamVjdERhdGFdXHJcbiAgICAgICAgfTtcclxuICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICBpZiAoZmxvd01vZGVsLmlzRWRpdGFibGUgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmRldGVjdExvY2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFdoZXJlQW1JLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB9O1xyXG4gICAgV2hlcmVBbUkucHJvdG90eXBlLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFdoZXJlQW1JLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmbG93U3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB0aGlzLmZsb3dLZXkpIHx8IHt9O1xyXG4gICAgICAgIHZhciBmbG93TW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgIHZhciBvYmplY3REYXRhID0gZmxvd01vZGVsLm9iamVjdERhdGFbMF07XHJcbiAgICAgICAgb2JqZWN0RGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqZWN0RGF0YSkpO1xyXG4gICAgICAgIG9iamVjdERhdGEuaXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqZWN0RGF0YS5wcm9wZXJ0aWVzLCBcIk9wZXJhdGluZ1N5c3RlbVwiLCB0aGlzLm9wZXJhdGluZ1N5c3RlbSk7XHJcbiAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqZWN0RGF0YS5wcm9wZXJ0aWVzLCBcIkJyb3dzZXJWZW5kb3JcIiwgdGhpcy5icm93c2VyVmVuZG9yKTtcclxuICAgICAgICBtYW55d2hvLnV0aWxzLnNldE9iamVjdERhdGFQcm9wZXJ0eShvYmplY3REYXRhLnByb3BlcnRpZXMsIFwiQnJvd3Nlck5hbWVcIiwgdGhpcy5icm93c2VyTmFtZSk7XHJcbiAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqZWN0RGF0YS5wcm9wZXJ0aWVzLCBcIkxvbmdpdHVkZVwiLCB0aGlzLmxvbmdpdHVkZSk7XHJcbiAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqZWN0RGF0YS5wcm9wZXJ0aWVzLCBcIkxhdGl0dWRlXCIsIHRoaXMubGF0aXR1ZGUpO1xyXG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IHtcclxuICAgICAgICAgICAgb2JqZWN0RGF0YTogW29iamVjdERhdGFdXHJcbiAgICAgICAgfTtcclxuICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9O1xyXG4gICAgV2hlcmVBbUkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICB2YXIgZmxvd1N0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICB2YXIgY2FwdGlvbiA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiVGl0bGVcIikgfHwgXCJTZWxlY3QgRmlsZVwiO1xyXG4gICAgICAgIHZhciB6b29tID0gcGFyc2VJbnQodGhpcy5nZXRBdHRyaWJ1dGUoXCJab29tXCIpIHx8IDE4KTtcclxuICAgICAgICB2YXIgYXBpS2V5ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJBcGlLZXlcIikgfHwgXCJcIjtcclxuICAgICAgICB2YXIgd2lkdGggPSBmbG93TW9kZWwud2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IGZsb3dNb2RlbC5oZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgdmFyIHN0eWxlID0ge307XHJcbiAgICAgICAgc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHZhciBtYXA7XHJcbiAgICAgICAgaWYgKHRoaXMubG9uZ2l0dWRlICYmIHRoaXMubGF0aXR1ZGUpIHtcclxuICAgICAgICAgICAgdmFyIHBvcyA9IHsgbGF0OiB0aGlzLmxhdGl0dWRlLCBsbmc6IHRoaXMubG9uZ2l0dWRlIH07XHJcbiAgICAgICAgICAgIC8vdmFyIG1hcmtlcnMgPSBbe3Bvc2l0aW9uOiBwb3MsIHRpdGxlOiBcIkhlcmVcIn1dO1xyXG4gICAgICAgICAgICAvL3ZhciBvcHRpb25zID0ge2NlbnRlcjpwb3MsIHpvb206em9vbX07XHJcbiAgICAgICAgICAgIG1hcCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFwXzEuZGVmYXVsdCwgeyBjZW50cmU6IHBvcywgem9vbTogem9vbSB9LFxyXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNYXJrZXIsIHsgY2VudGVyOiBwb3MsIHRpdGxlOiBcIkhlcmVcIiB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHN0eWxlIH0sIG1hcCk7XHJcbiAgICB9O1xyXG4gICAgV2hlcmVBbUkucHJvdG90eXBlLmhhbmRsZUFwaUxvYWRlZCA9IGZ1bmN0aW9uIChtYXAsIG1hcHMpIHtcclxuICAgICAgICB2YXIgeCA9IG1hcDtcclxuICAgIH07XHJcbiAgICBXaGVyZUFtSS5wcm90b3R5cGUuaW1oZXJlID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgIHRoaXMubGF0aXR1ZGUgPSByZXN1bHQuY29vcmRzLmxhdGl0dWRlO1xyXG4gICAgICAgIHRoaXMubG9uZ2l0dWRlID0gcmVzdWx0LmNvb3Jkcy5sb25naXR1ZGU7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpbmdTeXN0ZW0gPSBuYXZpZ2F0b3IucGxhdGZvcm07XHJcbiAgICAgICAgdGhpcy5icm93c2VyTmFtZSA9IG5hdmlnYXRvci5wcm9kdWN0O1xyXG4gICAgICAgIHRoaXMuYnJvd3NlclZlbmRvciA9IG5hdmlnYXRvci52ZW5kb3I7XHJcbiAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICB9O1xyXG4gICAgV2hlcmVBbUkucHJvdG90eXBlLmRldGVjdExvY2F0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24odGhpcy5pbWhlcmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpbmdTeXN0ZW0gPSBuYXZpZ2F0b3IucGxhdGZvcm07XHJcbiAgICAgICAgdGhpcy5icm93c2VyTmFtZSA9IG5hdmlnYXRvci5wcm9kdWN0O1xyXG4gICAgICAgIHRoaXMuYnJvd3NlclZlbmRvciA9IG5hdmlnYXRvci52ZW5kb3I7XHJcbiAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdoZXJlQW1JO1xyXG59KFJlYWN0LkNvbXBvbmVudCkpO1xyXG5tYW55d2hvLmNvbXBvbmVudC5yZWdpc3RlcignV2hlcmVBbUknLCBXaGVyZUFtSSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFdoZXJlQW1JO1xyXG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBSZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XHJcbnZhciBNYXJrZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWFya2VyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWFya2VyKHByb3BzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZ29vZ2xlTWFwc1VSTCA9IFwiaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lEWjJjYmpKa0ZsNXF5Z1pZY0tyY1pWVHpmWDcwR18tbllcIjtcclxuICAgICAgICBfdGhpcy5vblNjcmlwdExvYWRlZCA9IF90aGlzLm9uU2NyaXB0TG9hZGVkLmJpbmQoX3RoaXMpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIC8vZmlyZXMgd2hlbiBjb21wb25lbnQgaXMgbW91bnRlZCAvIGNvbXBsZXRlXHJcbiAgICBNYXJrZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vcmVxdWVzdCB0aGUgZ29vZ2xlIG1hcHMgYXBpIHNjcmlwdCB0byBiZSBhZGRlZFxyXG4gICAgICAgIHRoaXMuYWRkTWFwc1NjcmlwdCgpO1xyXG4gICAgfTtcclxuICAgIC8vdGhpcyBmdW5jdGlvbiBhZGRzIHRoZSBnb29nbGUgbWFwcyBzY3JpcHQgdG8gdGhlIHBhZ2VcclxuICAgIC8vdGhlIHRoaXMub25TY3JpcHRMb2FkZWQgbWV0aG9kIHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgc2NyaXB0IGhhcyBjb21wbGV0ZWQgbG9hZGluZ1xyXG4gICAgTWFya2VyLnByb3RvdHlwZS5hZGRNYXBzU2NyaXB0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NyYz1cXFwiXCIgKyB0aGlzLmdvb2dsZU1hcHNVUkwgKyBcIlxcXCJdXCIpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKE9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnLFxyXG4gICAgICAgICAgICAgICAgc3JjOiB0aGlzLmdvb2dsZU1hcHNVUkwsXHJcbiAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm9uU2NyaXB0TG9hZGVkKCk7IH1cclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vblNjcmlwdExvYWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvL3RoaXMgaGFuZGxlciBmaXJlcyB3aGVuIHRoZSBnb29nbGUgbWFwcyBzY3JpcHQgaGFzIGxvYWRlZFxyXG4gICAgTWFya2VyLnByb3RvdHlwZS5vblNjcmlwdExvYWRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2ZvcmNlIG51bWJlciBhcmdzIGludG8gaW50c1xyXG4gICAgICAgIHZhciBjZW50cmUgPSB7IGxuZzogcGFyc2VJbnQodGhpcy5wcm9wcy5jZW50cmUubG5nKSwgbGF0OiBwYXJzZUludCh0aGlzLnByb3BzLmNlbnRyZS5sYXQpIH07XHJcbiAgICAgICAgdmFyIHRpdGxlID0gdGhpcy5wcm9wcy50aXRsZTtcclxuICAgICAgICAvL2dldCBwYXJlbnQgbWFwXHJcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMucHJvcHMubWFwO1xyXG4gICAgICAgIC8vY29uc3QgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXBcIiksIG9wdGlvbnMpO1xyXG4gICAgICAgIHZhciBvcHRzID0geyBwb3NpdGlvbjogY2VudHJlLCBtYXA6IG1hcCwgdGl0bGU6IHRpdGxlIH07XHJcbiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIob3B0cyk7XHJcbiAgICB9O1xyXG4gICAgTWFya2VyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyB3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICcxMDAlJyB9IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNYXJrZXI7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IE1hcDtcclxuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRGV2aWNlRGV0ZWN0b3IuanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA5MzZlNDU5YjBmYWJiYjYyZjk1MCIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJSZWFjdFwiXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgR29vZ2xlIGZyb20gJ2dvb2dsZS1tYXBzJztcclxuaW1wb3J0IE1hcmtlciBmcm9tICcuL01hcmtlcic7XHJcblxyXG5jbGFzcyBNYXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgPGFueSwgYW55PlxyXG57XHJcblxyXG4gICAgZ29vZ2xlTWFwc1VSTD1cImh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5RFoyY2JqSmtGbDVxeWdaWWNLcmNaVlR6Zlg3MEdfLW5ZXCI7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyA6IGFueSkgXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMub25TY3JpcHRMb2FkZWQgPSB0aGlzLm9uU2NyaXB0TG9hZGVkLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9maXJlcyB3aGVuIGNvbXBvbmVudCBpcyBtb3VudGVkIC8gY29tcGxldGVcclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkgXHJcbiAgICB7XHJcbiAgICAgICAgLy9yZXF1ZXN0IHRoZSBnb29nbGUgbWFwcyBhcGkgc2NyaXB0IHRvIGJlIGFkZGVkXHJcbiAgICAgICAgdGhpcy5hZGRNYXBzU2NyaXB0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy90aGlzIGZ1bmN0aW9uIGFkZHMgdGhlIGdvb2dsZSBtYXBzIHNjcmlwdCB0byB0aGUgcGFnZVxyXG4gICAgLy90aGUgdGhpcy5vblNjcmlwdExvYWRlZCBtZXRob2Qgd2lsbCBiZSBmaXJlZCB3aGVuIHRoZSBzY3JpcHQgaGFzIGNvbXBsZXRlZCBsb2FkaW5nXHJcbiAgICBhZGRNYXBzU2NyaXB0KCkgXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbc3JjPVwiJHt0aGlzLmdvb2dsZU1hcHNVUkx9XCJdYCkubGVuZ3RoKSBcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnLFxyXG4gICAgICAgICAgICAgIHNyYzogdGhpcy5nb29nbGVNYXBzVVJMLFxyXG4gICAgICAgICAgICAgIG9ubG9hZDogKCkgPT4gdGhpcy5vblNjcmlwdExvYWRlZCgpXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5vblNjcmlwdExvYWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy90aGlzIGhhbmRsZXIgZmlyZXMgd2hlbiB0aGUgZ29vZ2xlIG1hcHMgc2NyaXB0IGhhcyBsb2FkZWRcclxuICAgICAgb25TY3JpcHRMb2FkZWQoKVxyXG4gICAgICB7XHJcbiAgICAgICAgLy9mb3JjZSBudW1iZXIgYXJncyBpbnRvIGZsb2F0cyAmIGludHNcclxuICAgICAgICB2YXIgY2VudHJlID0ge2xuZzogcGFyc2VGbG9hdCh0aGlzLnByb3BzLmNlbnRyZS5sbmcpICwgbGF0OiBwYXJzZUZsb2F0KHRoaXMucHJvcHMuY2VudHJlLmxhdCkgfTtcclxuICAgICAgICB2YXIgem9vbSA9IHBhcnNlSW50KHRoaXMucHJvcHMuem9vbSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9jcmVhdGUgYSBuZXcgb3B0aW9ucyBvYmplY3RcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtjZW50ZXIgOiBjZW50cmUsIHpvb20gOiB6b29tfTtcclxuXHJcbiAgICAgICAgLy9jcmVhdGUgYSBtYXBcclxuICAgICAgICBjb25zdCBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcFwiKSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHRoaXMucHJvcHMuY2hpbGRyZW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzd2l0Y2goT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMucHJvcHMuY2hpbGRyZW4pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiW29iamVjdCBBcnJheV1cIjpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPXRoaXMucHJvcHMuY2hpbGRyZW4gYXMgYW55W107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBtUG9zID0gMCA7IG1Qb3MgPCBhcnJheS5sZW5ndGggOyBtUG9zKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB7bG5nOiBwYXJzZUZsb2F0KGFycmF5W21Qb3NdLnByb3BzLmNlbnRlci5sbmcpICwgbGF0OiBwYXJzZUZsb2F0KGFycmF5W21Qb3NdLnByb3BzLmNlbnRlci5sYXQpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRzID0ge3Bvc2l0aW9uOiBwb3NpdGlvbiwgbWFwIDogbWFwLCB0aXRsZSA6IGFycmF5W21Qb3NdLnByb3BzLnRpdGxlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHRoaXMucHJvcHMuY2hpbGRyZW4gYXMgYW55O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHtsbmc6IHBhcnNlRmxvYXQob2JqLnByb3BzLmNlbnRlci5sbmcpICwgbGF0OiBwYXJzZUZsb2F0KG9iai5wcm9wcy5jZW50ZXIubGF0KSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRzID0ge3Bvc2l0aW9uOiBwb3NpdGlvbiwgbWFwIDogbWFwLCB0aXRsZSA6IG9iai5wcm9wcy50aXRsZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKG9wdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIHJlbmRlcigpIFxyXG4gICAgICB7XHJcbiAgICAgICAgcmV0dXJuIDxkaXYgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMTAwJScgfX0gaWQ9XCJtYXBcIiAvPlxyXG4gICAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1hcFxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvTWFwLnRzeCIsImV4cG9ydCAqIGZyb20gJy4vRGV2aWNlRGV0ZWN0b3InO1xuZXhwb3J0ICogZnJvbSAnLi9XaGVyZUFtSSc7XG5leHBvcnQgKiBmcm9tICcuL01hcCc7XG5leHBvcnQgKiBmcm9tICcuL01hcmtlcic7XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC50c3giLCJkZWNsYXJlIHZhciBtYW55d2hvOiBhbnk7XHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5jbGFzcyBEZXZpY2VEZXRlY3RvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksIGFueT4gXHJcbnsgICBcclxuICAgIGNvbXBvbmVudElkOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgZmxvd0tleTogc3RyaW5nID1cIlwiOyAgICBcclxuICAgIGF0dHJpYnV0ZXMgOiBhbnkgPSB7fTtcclxuICAgIFxyXG4gICAgcGxhdGZvcm06IHN0cmluZztcclxuICAgIHByb2R1Y3QgOiBzdHJpbmc7XHJcbiAgICBsYXRpdHVkZSA6IGFueTtcclxuICAgIGxvbmdpdHVkZSA6IGFueTsgXHJcbiAgICBkZXZpY2U6IHN0cmluZztcclxuICAgIHZlbmRvcjogc3RyaW5nO1xyXG5cclxuICAgIHRleHQgOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzIDogYW55KVxyXG5cdHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRJZCA9IHByb3BzLmlkO1xyXG4gICAgICAgIHRoaXMuZmxvd0tleSA9IHByb3BzLmZsb3dLZXk7XHJcblxyXG4gICAgICAgIC8vcHVzaCBhdHRyaWJ1dGVzIGludG8ga2V5ZWQgbWFwIFxyXG5cdFx0dmFyIGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsICAgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuXHRcdGlmKGZsb3dNb2RlbC5hdHRyaWJ1dGVzKVxyXG5cdFx0e1xyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBmbG93TW9kZWwuYXR0cmlidXRlcylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMuYXR0cmlidXRlc1trZXldID0gZmxvd01vZGVsLmF0dHJpYnV0ZXNba2V5XTtcclxuXHRcdFx0fVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkgXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kZXRlY3REZXZpY2UoKTtcclxuICAgICAgICAvL3RoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRVcGRhdGUoKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxuXHJcblx0Z2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUgOiBzdHJpbmcpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcbiAgICAgICBcclxuICAgIHJlbmRlcigpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgICB0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgIGNvbnN0IGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsICAgdGhpcy5mbG93S2V5KTtcclxuXHJcbiAgICAgICAgdmFyIGZpbGVQaWNrIDogYW55O1xyXG4gICAgICAgIHZhciBjYXB0aW9uIDogc3RyaW5nID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJUaXRsZVwiKSB8fCBcIlNlbGVjdCBGaWxlXCI7XHJcbiAgICAgICAgdmFyIHdpZHRoID0gZmxvd01vZGVsLndpZHRoICsgXCJweFwiO1xyXG4gICAgICAgIHZhciBoZWlnaHQ9Zmxvd01vZGVsLmhlaWdodCArIFwicHhcIjtcclxuXHJcbiAgICAgICAgdmFyIHN0eWxlIDogYW55ID0ge307XHJcbiAgICAgICAgc3R5bGUud2lkdGggPSB3aWR0aDtcclxuICAgICAgICBzdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgICAgIHZhciBsYWJlbCA9IFwiT1M6XCIgKyB0aGlzLnBsYXRmb3JtICsgXCIgQnJvd3NlcjpcIiArIHRoaXMudmVuZG9yICsgXCIgLSBcIiArIHRoaXMucHJvZHVjdCArIFwiIExhdGl0dWRlOlwiICsgdGhpcy5sYXRpdHVkZSArIFwiIExvbmdpdHVkZTpcIiArIHRoaXMubG9uZ2l0dWRlO1xyXG5cclxuICAgICAgICBmbG93U3RhdGUuY29udGVudFZhbHVlPWxhYmVsO1xyXG4gICAgICAgIHJldHVybiA8ZGl2PntsYWJlbH08L2Rpdj5cclxuICAgIH1cclxuICAgXHJcbiAgICBpbWhlcmUocmVzdWx0IDogYW55KVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubGF0aXR1ZGUgPSByZXN1bHQuY29vcmRzLmxhdGl0dWRlO1xyXG4gICAgICAgIHRoaXMubG9uZ2l0dWRlID0gcmVzdWx0LmNvb3Jkcy5sb25naXR1ZGU7XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBkZXRlY3REZXZpY2UoKVxyXG4gICAgIHtcclxuICAgICAgICB0aGlzLnBsYXRmb3JtID0gbmF2aWdhdG9yLnBsYXRmb3JtO1xyXG4gICAgICAgIHRoaXMucHJvZHVjdCA9IG5hdmlnYXRvci5wcm9kdWN0O1xyXG4gICAgICAgIHRoaXMudmVuZG9yID0gbmF2aWdhdG9yLnZlbmRvcjtcclxuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHRoaXMuaW1oZXJlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHZhciBkZXZpY2VOYW1lO1xyXG5cclxuICAgICAgICByZXR1cm4gZGV2aWNlTmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBcclxufVxyXG5cclxubWFueXdoby5jb21wb25lbnQucmVnaXN0ZXIoJ0RldmljZURldGVjdG9yJywgRGV2aWNlRGV0ZWN0b3IpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGV2aWNlRGV0ZWN0b3I7XHJcblxyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0RldmljZURldGVjdG9yLnRzeCIsImRlY2xhcmUgdmFyIG1hbnl3aG86IGFueTtcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IE1hcCBmcm9tICcuL01hcCc7XHJcblxyXG5jbGFzcyBNYXJrZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+IFxyXG57XHJcbiAgICB0ZXh0IDogc3RyaW5nID0gXCJoZXJlXCI7XHJcbiAgICByZW5kZXIoKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IEtfV0lEVEggPSA0MDtcclxuICAgICAgICBjb25zdCBLX0hFSUdIVCA9IDQwO1xyXG5cclxuICAgICAgICBjb25zdCBNYXJrZXJTdHlsZSA9IHtcclxuICAgICAgICAgICAgLy8gaW5pdGlhbGx5IGFueSBtYXAgb2JqZWN0IGhhcyBsZWZ0IHRvcCBjb3JuZXIgYXQgbGF0IGxuZyBjb29yZGluYXRlc1xyXG4gICAgICAgICAgICAvLyBpdCdzIG9uIHlvdSB0byBzZXQgb2JqZWN0IG9yaWdpbiB0byAwLDAgY29vcmRpbmF0ZXNcclxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScgYXMgJ2Fic29sdXRlJyxcclxuICAgICAgICAgICAgd2lkdGg6IEtfV0lEVEgsXHJcbiAgICAgICAgICAgIGhlaWdodDogS19IRUlHSFQsXHJcbiAgICAgICAgICAgIGxlZnQ6IC1LX1dJRFRIIC8gMixcclxuICAgICAgICAgICAgdG9wOiAtS19IRUlHSFQgLyAyLFxyXG4gICAgICAgICAgICBib3JkZXI6ICc1cHggc29saWQgI2Y0NDMzNicsXHJcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogS19IRUlHSFQsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcclxuICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyBhcyAnY2VudHJlJyxcclxuICAgICAgICAgICAgY29sb3I6ICcjM2Y1MWI1JyxcclxuICAgICAgICAgICAgZm9udFNpemU6IDE2LFxyXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcgYXMgJ2JvbGQnLFxyXG4gICAgICAgICAgICBwYWRkaW5nOiA0XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gPGRpdiBzdHlsZT17TWFya2VyU3R5bGV9Pnt0aGlzLnRleHR9PC9kaXY+XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFdoZXJlQW1JIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiBcclxueyAgIFxyXG4gICAgY29tcG9uZW50SWQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBmbG93S2V5OiBzdHJpbmcgPVwiXCI7ICAgIFxyXG4gICAgYXR0cmlidXRlcyA6IGFueSA9IHt9O1xyXG4gICAgXHJcbiAgICBwbGF0Zm9ybTogc3RyaW5nO1xyXG4gICAgcHJvZHVjdCA6IHN0cmluZztcclxuICAgIGxhdGl0dWRlIDogYW55O1xyXG4gICAgbG9uZ2l0dWRlIDogYW55OyBcclxuICAgIGRldmljZTogc3RyaW5nO1xyXG4gICAgdmVuZG9yOiBzdHJpbmc7XHJcblxyXG4gICAgb3BlcmF0aW5nU3lzdGVtIDogc3RyaW5nO1xyXG4gICAgYnJvd3Nlck5hbWUgOiBzdHJpbmc7XHJcbiAgICBicm93c2VyVmVuZG9yIDogc3RyaW5nO1xyXG5cclxuICAgIHRleHQgOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzIDogYW55KVxyXG5cdHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRJZCA9IHByb3BzLmlkO1xyXG4gICAgICAgIHRoaXMuZmxvd0tleSA9IHByb3BzLmZsb3dLZXk7XHJcblxyXG4gICAgICAgIC8vcHVzaCBhdHRyaWJ1dGVzIGludG8ga2V5ZWQgbWFwIFxyXG5cdFx0dmFyIGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsICAgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuXHRcdGlmKGZsb3dNb2RlbC5hdHRyaWJ1dGVzKVxyXG5cdFx0e1xyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBmbG93TW9kZWwuYXR0cmlidXRlcylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMuYXR0cmlidXRlc1trZXldID0gZmxvd01vZGVsLmF0dHJpYnV0ZXNba2V5XTtcclxuXHRcdFx0fVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkgXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgICB0aGlzLmZsb3dLZXkpO1xyXG4gICAgICAgIGNvbnN0IGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgfHwge307XHJcblxyXG4gICAgICAgIHZhciBvYmplY3REYXRhIDogYW55O1xyXG4gICAgICAgIGlmKGZsb3dTdGF0ZS5vYmplY3REYXRhWzBdKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb2JqZWN0RGF0YT1mbG93U3RhdGUub2JqZWN0RGF0YVswXTtcclxuICAgICAgICAgICAgdmFyIHByb3BzID0gb2JqZWN0RGF0YS5wcm9wZXJ0aWVzO1xyXG4gICAgICAgICAgICB0aGlzLmxvbmdpdHVkZSA9IG1hbnl3aG8udXRpbHMuZ2V0T2JqZWN0RGF0YVByb3BlcnR5KHByb3BzLCBcIkxvbmdpdHVkZVwiKS5jb250ZW50VmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMubGF0aXR1ZGUgPSBtYW55d2hvLnV0aWxzLmdldE9iamVjdERhdGFQcm9wZXJ0eShwcm9wcywgXCJMYXRpdHVkZVwiKS5jb250ZW50VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG9iamVjdERhdGE9Zmxvd01vZGVsLm9iamVjdERhdGFbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvYmplY3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG5ld1N0YXRlID0ge1xyXG5cdFx0XHRvYmplY3REYXRhOiBbb2JqZWN0RGF0YV1cclxuXHRcdH07XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuXHJcbiAgICAgICAgaWYoZmxvd01vZGVsLmlzRWRpdGFibGUgPT0gdHJ1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0ZWN0TG9jYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKClcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG5cdGdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lIDogc3RyaW5nKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSlcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNhdmUoKVxyXG4gICAge1xyXG5cclxuICAgICAgICBjb25zdCBmbG93U3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB0aGlzLmZsb3dLZXkpIHx8IHt9O1xyXG4gICAgICAgIGNvbnN0IGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsICAgdGhpcy5mbG93S2V5KTtcclxuXHJcbiAgICAgICAgdmFyIG9iamVjdERhdGEgPSBmbG93TW9kZWwub2JqZWN0RGF0YVswXTtcclxuXHJcbiAgICAgICAgb2JqZWN0RGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqZWN0RGF0YSkpO1xyXG5cclxuICAgICAgICBvYmplY3REYXRhLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1hbnl3aG8udXRpbHMuc2V0T2JqZWN0RGF0YVByb3BlcnR5KG9iamVjdERhdGEucHJvcGVydGllcywgXCJPcGVyYXRpbmdTeXN0ZW1cIiwgdGhpcy5vcGVyYXRpbmdTeXN0ZW0pO1xyXG4gICAgICAgIG1hbnl3aG8udXRpbHMuc2V0T2JqZWN0RGF0YVByb3BlcnR5KG9iamVjdERhdGEucHJvcGVydGllcywgXCJCcm93c2VyVmVuZG9yXCIsIHRoaXMuYnJvd3NlclZlbmRvcik7XHJcbiAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqZWN0RGF0YS5wcm9wZXJ0aWVzLCBcIkJyb3dzZXJOYW1lXCIsIHRoaXMuYnJvd3Nlck5hbWUpO1xyXG4gICAgICAgIG1hbnl3aG8udXRpbHMuc2V0T2JqZWN0RGF0YVByb3BlcnR5KG9iamVjdERhdGEucHJvcGVydGllcywgXCJMb25naXR1ZGVcIiwgdGhpcy5sb25naXR1ZGUpO1xyXG4gICAgICAgIG1hbnl3aG8udXRpbHMuc2V0T2JqZWN0RGF0YVByb3BlcnR5KG9iamVjdERhdGEucHJvcGVydGllcywgXCJMYXRpdHVkZVwiLCB0aGlzLmxhdGl0dWRlKTtcclxuXHJcbiAgICAgICAgdmFyIG5ld1N0YXRlID0ge1xyXG4gICAgICAgICAgICBvYmplY3REYXRhOiBbb2JqZWN0RGF0YV1cclxuICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuXHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgICAgXHJcbiAgICByZW5kZXIoKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsICAgdGhpcy5mbG93S2V5KTtcclxuICAgICAgICBjb25zdCBmbG93U3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCAgIHRoaXMuZmxvd0tleSk7XHJcblxyXG4gICAgICAgIHZhciBjYXB0aW9uIDogc3RyaW5nID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJUaXRsZVwiKSB8fCBcIlNlbGVjdCBGaWxlXCI7XHJcbiAgICAgICAgdmFyIHpvb20gOiBudW1iZXIgPSBwYXJzZUludCh0aGlzLmdldEF0dHJpYnV0ZShcIlpvb21cIikgfHwgMTgpO1xyXG4gICAgICAgIHZhciBhcGlLZXkgPSB0aGlzLmdldEF0dHJpYnV0ZShcIkFwaUtleVwiKSB8fCBcIlwiO1xyXG4gICAgICAgIHZhciB3aWR0aCA9IGZsb3dNb2RlbC53aWR0aCArIFwicHhcIjtcclxuICAgICAgICB2YXIgaGVpZ2h0PWZsb3dNb2RlbC5oZWlnaHQgKyBcInB4XCI7XHJcblxyXG4gICAgICAgIHZhciBzdHlsZSA6IGFueSA9IHt9O1xyXG4gICAgICAgIHN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG4gICAgICAgIHN0eWxlLmhlaWdodCA9IGhlaWdodDtcclxuXHJcblxyXG4gICAgICAgIHZhciBtYXAgOiBhbnk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMubG9uZ2l0dWRlICYmIHRoaXMubGF0aXR1ZGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcG9zID0ge2xhdDogdGhpcy5sYXRpdHVkZSwgbG5nOiB0aGlzLmxvbmdpdHVkZX07XHJcbiAgICAgICAgICAgIC8vdmFyIG1hcmtlcnMgPSBbe3Bvc2l0aW9uOiBwb3MsIHRpdGxlOiBcIkhlcmVcIn1dO1xyXG4gICAgICAgICAgICAvL3ZhciBvcHRpb25zID0ge2NlbnRlcjpwb3MsIHpvb206em9vbX07XHJcblxyXG4gICAgICAgICAgICBtYXAgPSA8TWFwIGNlbnRyZT17cG9zfSB6b29tPXt6b29tfT5cclxuICAgICAgICAgICAgICAgIDxNYXJrZXIgY2VudGVyPXtwb3N9IHRpdGxlPVwiSGVyZVwiPjwvTWFya2VyPlxyXG4gICAgICAgICAgICA8L01hcD5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICA8ZGl2IHN0eWxlPXtzdHlsZX0+e21hcH08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICB9XHJcbiAgIFxyXG4gICAgaGFuZGxlQXBpTG9hZGVkKG1hcCA6IGFueSwgbWFwcyA6IGFueSlcclxuICAgIHtcclxuICAgICAgICB2YXIgeCA9IG1hcDtcclxuICAgIH1cclxuXHJcbiAgICBpbWhlcmUocmVzdWx0IDogYW55KVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubGF0aXR1ZGUgPSByZXN1bHQuY29vcmRzLmxhdGl0dWRlO1xyXG4gICAgICAgIHRoaXMubG9uZ2l0dWRlID0gcmVzdWx0LmNvb3Jkcy5sb25naXR1ZGU7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRpbmdTeXN0ZW0gPSBuYXZpZ2F0b3IucGxhdGZvcm07XHJcbiAgICAgICAgdGhpcy5icm93c2VyTmFtZSA9IG5hdmlnYXRvci5wcm9kdWN0O1xyXG4gICAgICAgIHRoaXMuYnJvd3NlclZlbmRvciA9IG5hdmlnYXRvci52ZW5kb3I7XHJcbiAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGRldGVjdExvY2F0aW9uKClcclxuICAgIHtcclxuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHRoaXMuaW1oZXJlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMub3BlcmF0aW5nU3lzdGVtID0gbmF2aWdhdG9yLnBsYXRmb3JtO1xyXG4gICAgICAgIHRoaXMuYnJvd3Nlck5hbWUgPSBuYXZpZ2F0b3IucHJvZHVjdDtcclxuICAgICAgICB0aGlzLmJyb3dzZXJWZW5kb3IgPSBuYXZpZ2F0b3IudmVuZG9yO1xyXG4gICAgICAgIHRoaXMuc2F2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG59XHJcblxyXG5tYW55d2hvLmNvbXBvbmVudC5yZWdpc3RlcignV2hlcmVBbUknLCBXaGVyZUFtSSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBXaGVyZUFtSTtcclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9XaGVyZUFtSS50c3giLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAqIGFzIEdvb2dsZSBmcm9tICdnb29nbGUtbWFwcyc7XHJcblxyXG5jbGFzcyBNYXJrZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgPGFueSwgYW55PlxyXG57XHJcblxyXG4gICAgZ29vZ2xlTWFwc1VSTD1cImh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5RFoyY2JqSmtGbDVxeWdaWWNLcmNaVlR6Zlg3MEdfLW5ZXCI7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyA6IGFueSkgXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMub25TY3JpcHRMb2FkZWQgPSB0aGlzLm9uU2NyaXB0TG9hZGVkLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9maXJlcyB3aGVuIGNvbXBvbmVudCBpcyBtb3VudGVkIC8gY29tcGxldGVcclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkgXHJcbiAgICB7XHJcbiAgICAgICAgLy9yZXF1ZXN0IHRoZSBnb29nbGUgbWFwcyBhcGkgc2NyaXB0IHRvIGJlIGFkZGVkXHJcbiAgICAgICAgdGhpcy5hZGRNYXBzU2NyaXB0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy90aGlzIGZ1bmN0aW9uIGFkZHMgdGhlIGdvb2dsZSBtYXBzIHNjcmlwdCB0byB0aGUgcGFnZVxyXG4gICAgLy90aGUgdGhpcy5vblNjcmlwdExvYWRlZCBtZXRob2Qgd2lsbCBiZSBmaXJlZCB3aGVuIHRoZSBzY3JpcHQgaGFzIGNvbXBsZXRlZCBsb2FkaW5nXHJcbiAgICBhZGRNYXBzU2NyaXB0KCkgXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbc3JjPVwiJHt0aGlzLmdvb2dsZU1hcHNVUkx9XCJdYCkubGVuZ3RoKSBcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChPYmplY3QuYXNzaWduKFxyXG4gICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnLFxyXG4gICAgICAgICAgICAgIHNyYzogdGhpcy5nb29nbGVNYXBzVVJMLFxyXG4gICAgICAgICAgICAgIG9ubG9hZDogKCkgPT4gdGhpcy5vblNjcmlwdExvYWRlZCgpXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5vblNjcmlwdExvYWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy90aGlzIGhhbmRsZXIgZmlyZXMgd2hlbiB0aGUgZ29vZ2xlIG1hcHMgc2NyaXB0IGhhcyBsb2FkZWRcclxuICAgICAgb25TY3JpcHRMb2FkZWQoKVxyXG4gICAgICB7XHJcbiAgICAgICAgLy9mb3JjZSBudW1iZXIgYXJncyBpbnRvIGludHNcclxuICAgICAgICB2YXIgY2VudHJlID0ge2xuZzogcGFyc2VJbnQodGhpcy5wcm9wcy5jZW50cmUubG5nKSAsIGxhdDogcGFyc2VJbnQodGhpcy5wcm9wcy5jZW50cmUubGF0KSB9O1xyXG4gICAgICAgIHZhciB0aXRsZSA9IHRoaXMucHJvcHMudGl0bGU7XHJcblxyXG4gICAgICAgIC8vZ2V0IHBhcmVudCBtYXBcclxuICAgICAgICB2YXIgbWFwID0gdGhpcy5wcm9wcy5tYXA7XHJcbiAgICAgICAgLy9jb25zdCBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcFwiKSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHZhciBvcHRzID0ge3Bvc2l0aW9uOiBjZW50cmUsIG1hcCA6IG1hcCwgdGl0bGUgOiB0aXRsZSB9XHJcbiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIob3B0cyk7XHJcblxyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgcmVuZGVyKCkgXHJcbiAgICAgIHtcclxuICAgICAgICByZXR1cm4gPGRpdiBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICcxMDAlJyB9fSAgLz5cclxuICAgICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNYXBcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL01hcmtlci50c3giXSwic291cmNlUm9vdCI6IiJ9